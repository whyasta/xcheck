image: docker

stages:
  - build
  - push
  - deploy

# build:
#   stage: build
#   image:
#     name: gcr.io/kaniko-project/executor:v1.23.2-debug
#     entrypoint: [""]
#   environment:
#     name: dev
#   tags:
#     - bm-dev-kris
#   before_script:
#     - if [ "$CI_COMMIT_BRANCH" ==  "main" ]; then VERSION=$CI_COMMIT_BRANCH; else VERSION=$CI_COMMIT_TAG; fi;
#     - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
#   only:
#     refs:
#       - tags
#       - main
#   script:
#     - /kaniko/warmer --verbosity=info --image=alpine:3.20 --image=golang:alpine3.20
#     - /kaniko/executor
#       --context $CI_PROJECT_DIR
#       --dockerfile $CI_PROJECT_DIR/Dockerfile
#       --destination ${CI_REGISTRY_IMAGE}:$VERSION
#       --tar-path image.tar
#       --cache=true
#       --cache-dir=/cache
#       --cache-ttl=720h
#       --cleanup
#   artifacts:
#     paths:
#     - image.tar
#     when: on_success
#     expire_in: 1 day

build:
  stage: build
  image: docker:20-dind
  environment:
    name: dev
  tags:
    - bm-dev-kris
  before_script:
    - if [ "$CI_COMMIT_BRANCH" ==  "main" ]; then VERSION=$CI_COMMIT_BRANCH; else VERSION=$CI_COMMIT_TAG; fi;
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  only:
    refs:
      - tags
      - main
  script:
    - docker buildx build -t $CI_REGISTRY_IMAGE:$VERSION --platform "linux/amd64,linux/arm64"  --build-arg TAG=$VERSION .
    - docker image ls
    - docker push $CI_REGISTRY_IMAGE:$VERSION

push:
  stage: push
  image: docker:20-dind
  tags:
    - scanin
  only:
    refs:
      - tags
  before_script:
    - if [ "$CI_COMMIT_BRANCH" ==  "main" ]; then VERSION=$CI_COMMIT_BRANCH; else VERSION=$CI_COMMIT_TAG; fi;
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - docker pull $CI_REGISTRY_IMAGE:$VERSION
    - docker tag $CI_REGISTRY_IMAGE:$VERSION $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  needs:
    - build

deploy_dev:
  stage: deploy
  environment:
    name: dev
  tags:
    - bm-dev-kris
  variables:
    VERSION: $CI_PIPELINE_IID
  only:
    refs:
      - main
  before_script:
    - if [ "$CI_COMMIT_BRANCH" ==  "main" ]; then VERSION=$CI_COMMIT_BRANCH; else VERSION=$CI_COMMIT_TAG; fi;
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - touch .env
    - touch .env.local
    - echo "$ENV" >> .env
    - echo "$ENV_LOCAL" >> .env.local
    - docker compose -f docker-compose.yml up -d
    - docker compose -f docker-compose-local.yml up -d
  needs:
    - build

deploy_prod:
  stage: deploy
  environment:
    name: prod
  tags:
    - scanin
  variables:
    VERSION: $CI_PIPELINE_IID
  only:
    refs:
      - tags
  before_script:
    - if [ "$CI_COMMIT_BRANCH" ==  "main" ]; then VERSION=$CI_COMMIT_BRANCH; else VERSION=$CI_COMMIT_TAG; fi;
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - touch .env
    - echo "$ENV" >> .env
    - docker compose -f docker-compose.yml up -d
  after_script:
    - less .env
  when: manual
  needs:
    - build
